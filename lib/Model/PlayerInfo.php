<?php
/**
 * PlayerInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * A-maze-ing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlayerInfo Class Doc Comment
 *
 * @category Class
 * @description The data structure that represents information related to a player.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlayerInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlayerInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'player_id' => 'string',
        'name' => 'string',
        'is_in_playthrough' => 'bool',
        'maze' => 'string',
        'has_found_easter_egg' => 'bool',
        'maze_score_in_hand' => 'int',
        'maze_score_in_bag' => 'int',
        'player_score' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'player_id' => null,
        'name' => null,
        'is_in_playthrough' => null,
        'maze' => null,
        'has_found_easter_egg' => null,
        'maze_score_in_hand' => 'int32',
        'maze_score_in_bag' => 'int32',
        'player_score' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'player_id' => 'playerId',
        'name' => 'name',
        'is_in_playthrough' => 'isInPlaythrough',
        'maze' => 'maze',
        'has_found_easter_egg' => 'hasFoundEasterEgg',
        'maze_score_in_hand' => 'mazeScoreInHand',
        'maze_score_in_bag' => 'mazeScoreInBag',
        'player_score' => 'playerScore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'player_id' => 'setPlayerId',
        'name' => 'setName',
        'is_in_playthrough' => 'setIsInPlaythrough',
        'maze' => 'setMaze',
        'has_found_easter_egg' => 'setHasFoundEasterEgg',
        'maze_score_in_hand' => 'setMazeScoreInHand',
        'maze_score_in_bag' => 'setMazeScoreInBag',
        'player_score' => 'setPlayerScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'player_id' => 'getPlayerId',
        'name' => 'getName',
        'is_in_playthrough' => 'getIsInPlaythrough',
        'maze' => 'getMaze',
        'has_found_easter_egg' => 'getHasFoundEasterEgg',
        'maze_score_in_hand' => 'getMazeScoreInHand',
        'maze_score_in_bag' => 'getMazeScoreInBag',
        'player_score' => 'getPlayerScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_in_playthrough'] = isset($data['is_in_playthrough']) ? $data['is_in_playthrough'] : null;
        $this->container['maze'] = isset($data['maze']) ? $data['maze'] : null;
        $this->container['has_found_easter_egg'] = isset($data['has_found_easter_egg']) ? $data['has_found_easter_egg'] : null;
        $this->container['maze_score_in_hand'] = isset($data['maze_score_in_hand']) ? $data['maze_score_in_hand'] : null;
        $this->container['maze_score_in_bag'] = isset($data['maze_score_in_bag']) ? $data['maze_score_in_bag'] : null;
        $this->container['player_score'] = isset($data['player_score']) ? $data['player_score'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_in_playthrough'] === null) {
            $invalidProperties[] = "'is_in_playthrough' can't be null";
        }
        if ($this->container['has_found_easter_egg'] === null) {
            $invalidProperties[] = "'has_found_easter_egg' can't be null";
        }
        if ($this->container['player_score'] === null) {
            $invalidProperties[] = "'player_score' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets player_id
     *
     * @return string
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param string $player_id The public unique identifier of a player.
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name a player has chosen to represent her.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_in_playthrough
     *
     * @return bool
     */
    public function getIsInPlaythrough()
    {
        return $this->container['is_in_playthrough'];
    }

    /**
     * Sets is_in_playthrough
     *
     * @param bool $is_in_playthrough An indication of whether a player is currently playing a maze or not.
     *
     * @return $this
     */
    public function setIsInPlaythrough($is_in_playthrough)
    {
        $this->container['is_in_playthrough'] = $is_in_playthrough;

        return $this;
    }

    /**
     * Gets maze
     *
     * @return string
     */
    public function getMaze()
    {
        return $this->container['maze'];
    }

    /**
     * Sets maze
     *
     * @param string $maze The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.
     *
     * @return $this
     */
    public function setMaze($maze)
    {
        $this->container['maze'] = $maze;

        return $this;
    }

    /**
     * Gets has_found_easter_egg
     *
     * @return bool
     */
    public function getHasFoundEasterEgg()
    {
        return $this->container['has_found_easter_egg'];
    }

    /**
     * Sets has_found_easter_egg
     *
     * @param bool $has_found_easter_egg Wink wink.
     *
     * @return $this
     */
    public function setHasFoundEasterEgg($has_found_easter_egg)
    {
        $this->container['has_found_easter_egg'] = $has_found_easter_egg;

        return $this;
    }

    /**
     * Gets maze_score_in_hand
     *
     * @return int
     */
    public function getMazeScoreInHand()
    {
        return $this->container['maze_score_in_hand'];
    }

    /**
     * Sets maze_score_in_hand
     *
     * @param int $maze_score_in_hand How much score the player has in her hand. Only available if player is playing a maze.
     *
     * @return $this
     */
    public function setMazeScoreInHand($maze_score_in_hand)
    {
        $this->container['maze_score_in_hand'] = $maze_score_in_hand;

        return $this;
    }

    /**
     * Gets maze_score_in_bag
     *
     * @return int
     */
    public function getMazeScoreInBag()
    {
        return $this->container['maze_score_in_bag'];
    }

    /**
     * Sets maze_score_in_bag
     *
     * @param int $maze_score_in_bag How much score the player has in her bag. Only available if player is playing a maze.
     *
     * @return $this
     */
    public function setMazeScoreInBag($maze_score_in_bag)
    {
        $this->container['maze_score_in_bag'] = $maze_score_in_bag;

        return $this;
    }

    /**
     * Gets player_score
     *
     * @return int
     */
    public function getPlayerScore()
    {
        return $this->container['player_score'];
    }

    /**
     * Sets player_score
     *
     * @param int $player_score The accumulated score across all played mazes.
     *
     * @return $this
     */
    public function setPlayerScore($player_score)
    {
        $this->container['player_score'] = $player_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


