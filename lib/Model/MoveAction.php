<?php
/**
 * MoveAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * A-maze-ing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MoveAction Class Doc Comment
 *
 * @category Class
 * @description A tile
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MoveAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MoveAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'direction' => 'string',
        'is_start' => 'bool',
        'allows_exit' => 'bool',
        'allows_score_collection' => 'bool',
        'has_been_visited' => 'bool',
        'reward_on_destination' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'direction' => null,
        'is_start' => null,
        'allows_exit' => null,
        'allows_score_collection' => null,
        'has_been_visited' => null,
        'reward_on_destination' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'direction' => 'direction',
        'is_start' => 'isStart',
        'allows_exit' => 'allowsExit',
        'allows_score_collection' => 'allowsScoreCollection',
        'has_been_visited' => 'hasBeenVisited',
        'reward_on_destination' => 'rewardOnDestination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'direction' => 'setDirection',
        'is_start' => 'setIsStart',
        'allows_exit' => 'setAllowsExit',
        'allows_score_collection' => 'setAllowsScoreCollection',
        'has_been_visited' => 'setHasBeenVisited',
        'reward_on_destination' => 'setRewardOnDestination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'direction' => 'getDirection',
        'is_start' => 'getIsStart',
        'allows_exit' => 'getAllowsExit',
        'allows_score_collection' => 'getAllowsScoreCollection',
        'has_been_visited' => 'getHasBeenVisited',
        'reward_on_destination' => 'getRewardOnDestination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_UP = 'Up';
    const DIRECTION_RIGHT = 'Right';
    const DIRECTION_DOWN = 'Down';
    const DIRECTION_LEFT = 'Left';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_UP,
            self::DIRECTION_RIGHT,
            self::DIRECTION_DOWN,
            self::DIRECTION_LEFT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['is_start'] = isset($data['is_start']) ? $data['is_start'] : null;
        $this->container['allows_exit'] = isset($data['allows_exit']) ? $data['allows_exit'] : null;
        $this->container['allows_score_collection'] = isset($data['allows_score_collection']) ? $data['allows_score_collection'] : null;
        $this->container['has_been_visited'] = isset($data['has_been_visited']) ? $data['has_been_visited'] : null;
        $this->container['reward_on_destination'] = isset($data['reward_on_destination']) ? $data['reward_on_destination'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_start'] === null) {
            $invalidProperties[] = "'is_start' can't be null";
        }
        if ($this->container['allows_exit'] === null) {
            $invalidProperties[] = "'allows_exit' can't be null";
        }
        if ($this->container['allows_score_collection'] === null) {
            $invalidProperties[] = "'allows_score_collection' can't be null";
        }
        if ($this->container['has_been_visited'] === null) {
            $invalidProperties[] = "'has_been_visited' can't be null";
        }
        if ($this->container['reward_on_destination'] === null) {
            $invalidProperties[] = "'reward_on_destination' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction What is the relative direction of this tile.
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets is_start
     *
     * @return bool
     */
    public function getIsStart()
    {
        return $this->container['is_start'];
    }

    /**
     * Sets is_start
     *
     * @param bool $is_start Is this the tile where the maze begun.
     *
     * @return $this
     */
    public function setIsStart($is_start)
    {
        $this->container['is_start'] = $is_start;

        return $this;
    }

    /**
     * Gets allows_exit
     *
     * @return bool
     */
    public function getAllowsExit()
    {
        return $this->container['allows_exit'];
    }

    /**
     * Sets allows_exit
     *
     * @param bool $allows_exit Can you exit the maze on this tile.
     *
     * @return $this
     */
    public function setAllowsExit($allows_exit)
    {
        $this->container['allows_exit'] = $allows_exit;

        return $this;
    }

    /**
     * Gets allows_score_collection
     *
     * @return bool
     */
    public function getAllowsScoreCollection()
    {
        return $this->container['allows_score_collection'];
    }

    /**
     * Sets allows_score_collection
     *
     * @param bool $allows_score_collection Does this tile allow for score collection (moving score from your hand to your bag).
     *
     * @return $this
     */
    public function setAllowsScoreCollection($allows_score_collection)
    {
        $this->container['allows_score_collection'] = $allows_score_collection;

        return $this;
    }

    /**
     * Gets has_been_visited
     *
     * @return bool
     */
    public function getHasBeenVisited()
    {
        return $this->container['has_been_visited'];
    }

    /**
     * Sets has_been_visited
     *
     * @param bool $has_been_visited Have you visited this tile before.
     *
     * @return $this
     */
    public function setHasBeenVisited($has_been_visited)
    {
        $this->container['has_been_visited'] = $has_been_visited;

        return $this;
    }

    /**
     * Gets reward_on_destination
     *
     * @return int
     */
    public function getRewardOnDestination()
    {
        return $this->container['reward_on_destination'];
    }

    /**
     * Sets reward_on_destination
     *
     * @param int $reward_on_destination What reward is available on this tile.
     *
     * @return $this
     */
    public function setRewardOnDestination($reward_on_destination)
    {
        $this->container['reward_on_destination'] = $reward_on_destination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


