<?php
/**
 * PossibleActionsAndCurrentScore
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * A-maze-ing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PossibleActionsAndCurrentScore Class Doc Comment
 *
 * @category Class
 * @description From the current tile where you stand, what actions are available on it and on the surrounding tiles.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PossibleActionsAndCurrentScore implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PossibleActionsAndCurrentScore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'possible_move_actions' => '\Swagger\Client\Model\MoveAction[]',
        'can_collect_score_here' => 'bool',
        'can_exit_maze_here' => 'bool',
        'current_score_in_hand' => 'int',
        'current_score_in_bag' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'possible_move_actions' => null,
        'can_collect_score_here' => null,
        'can_exit_maze_here' => null,
        'current_score_in_hand' => 'int32',
        'current_score_in_bag' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'possible_move_actions' => 'possibleMoveActions',
        'can_collect_score_here' => 'canCollectScoreHere',
        'can_exit_maze_here' => 'canExitMazeHere',
        'current_score_in_hand' => 'currentScoreInHand',
        'current_score_in_bag' => 'currentScoreInBag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'possible_move_actions' => 'setPossibleMoveActions',
        'can_collect_score_here' => 'setCanCollectScoreHere',
        'can_exit_maze_here' => 'setCanExitMazeHere',
        'current_score_in_hand' => 'setCurrentScoreInHand',
        'current_score_in_bag' => 'setCurrentScoreInBag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'possible_move_actions' => 'getPossibleMoveActions',
        'can_collect_score_here' => 'getCanCollectScoreHere',
        'can_exit_maze_here' => 'getCanExitMazeHere',
        'current_score_in_hand' => 'getCurrentScoreInHand',
        'current_score_in_bag' => 'getCurrentScoreInBag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['possible_move_actions'] = isset($data['possible_move_actions']) ? $data['possible_move_actions'] : null;
        $this->container['can_collect_score_here'] = isset($data['can_collect_score_here']) ? $data['can_collect_score_here'] : null;
        $this->container['can_exit_maze_here'] = isset($data['can_exit_maze_here']) ? $data['can_exit_maze_here'] : null;
        $this->container['current_score_in_hand'] = isset($data['current_score_in_hand']) ? $data['current_score_in_hand'] : null;
        $this->container['current_score_in_bag'] = isset($data['current_score_in_bag']) ? $data['current_score_in_bag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['possible_move_actions'] === null) {
            $invalidProperties[] = "'possible_move_actions' can't be null";
        }
        if ($this->container['can_collect_score_here'] === null) {
            $invalidProperties[] = "'can_collect_score_here' can't be null";
        }
        if ($this->container['can_exit_maze_here'] === null) {
            $invalidProperties[] = "'can_exit_maze_here' can't be null";
        }
        if ($this->container['current_score_in_hand'] === null) {
            $invalidProperties[] = "'current_score_in_hand' can't be null";
        }
        if ($this->container['current_score_in_bag'] === null) {
            $invalidProperties[] = "'current_score_in_bag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets possible_move_actions
     *
     * @return \Swagger\Client\Model\MoveAction[]
     */
    public function getPossibleMoveActions()
    {
        return $this->container['possible_move_actions'];
    }

    /**
     * Sets possible_move_actions
     *
     * @param \Swagger\Client\Model\MoveAction[] $possible_move_actions The actions available on your surrounding tiles (lookahead of one tile).
     *
     * @return $this
     */
    public function setPossibleMoveActions($possible_move_actions)
    {
        $this->container['possible_move_actions'] = $possible_move_actions;

        return $this;
    }

    /**
     * Gets can_collect_score_here
     *
     * @return bool
     */
    public function getCanCollectScoreHere()
    {
        return $this->container['can_collect_score_here'];
    }

    /**
     * Sets can_collect_score_here
     *
     * @param bool $can_collect_score_here In the tile where you are standing, is it possible to collect score (from hand to bag).
     *
     * @return $this
     */
    public function setCanCollectScoreHere($can_collect_score_here)
    {
        $this->container['can_collect_score_here'] = $can_collect_score_here;

        return $this;
    }

    /**
     * Gets can_exit_maze_here
     *
     * @return bool
     */
    public function getCanExitMazeHere()
    {
        return $this->container['can_exit_maze_here'];
    }

    /**
     * Sets can_exit_maze_here
     *
     * @param bool $can_exit_maze_here In the tile where you are standing, is it possible to exit the maze. Remember you will lose any score in hand  and only be rewarded with the score you have in your bag.
     *
     * @return $this
     */
    public function setCanExitMazeHere($can_exit_maze_here)
    {
        $this->container['can_exit_maze_here'] = $can_exit_maze_here;

        return $this;
    }

    /**
     * Gets current_score_in_hand
     *
     * @return int
     */
    public function getCurrentScoreInHand()
    {
        return $this->container['current_score_in_hand'];
    }

    /**
     * Sets current_score_in_hand
     *
     * @param int $current_score_in_hand What is the score you currently have in your hand. Find a score collection point and issue a collect  score command to move this score into your bag. Score in your hand is not awarded when you exit a maze.
     *
     * @return $this
     */
    public function setCurrentScoreInHand($current_score_in_hand)
    {
        $this->container['current_score_in_hand'] = $current_score_in_hand;

        return $this;
    }

    /**
     * Gets current_score_in_bag
     *
     * @return int
     */
    public function getCurrentScoreInBag()
    {
        return $this->container['current_score_in_bag'];
    }

    /**
     * Sets current_score_in_bag
     *
     * @param int $current_score_in_bag What is the score currently in your bag. When you exit the maze this score will be rewarded to your total  overall score.
     *
     * @return $this
     */
    public function setCurrentScoreInBag($current_score_in_bag)
    {
        $this->container['current_score_in_bag'] = $current_score_in_bag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


